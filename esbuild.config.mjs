import esbuild from 'esbuild';
import process from 'process';
import builtins from 'builtin-modules';
import { copyFile, mkdir, readdir, readFile, writeFile } from 'fs/promises';
import { join, resolve } from 'path';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const PLUGIN_NAME = 'obsidian-sqlite-sync';
const VAULT_PATH =
  '/Users/michaelsageryd/Library/Mobile Documents/iCloud~md~obsidian/Documents/the-vault/.obsidian/plugins';

async function copyManifest() {
  await copyFile('src/manifest.json', 'build/manifest.json');
}

async function copyAndTransformStopwordFiles() {
  const stopwordDir = 'node_modules/stopword/src';
  const buildStopwordDir = 'build/stopwords';
  await mkdir(buildStopwordDir, { recursive: true });

  const files = await readdir(stopwordDir);
  for (const file of files) {
    if (file.startsWith('stopwords_') && file.endsWith('.js')) {
      const content = await readFile(join(stopwordDir, file), 'utf-8');
      const transformedContent = content.replace(/export\s*{\s*(\w+)\s*}/g, 'module.exports = { $1 }');
      await writeFile(join(buildStopwordDir, file), transformedContent);
    }
  }
}

async function copyToVault() {
  const pluginDir = join(VAULT_PATH, PLUGIN_NAME);
  const filesToCopy = ['main.js', 'manifest.json'];

  await mkdir(pluginDir, { recursive: true });

  for (const file of filesToCopy) {
    const sourcePath = resolve('build', file);
    const destPath = join(pluginDir, file);
    await copyFile(sourcePath, destPath);
  }

  // Copy stopword files to vault
  const buildStopwordDir = resolve('build/stopwords');
  const vaultStopwordDir = join(pluginDir, 'stopwords');
  await mkdir(vaultStopwordDir, { recursive: true });

  const files = await readdir(buildStopwordDir);
  for (const file of files) {
    await copyFile(join(buildStopwordDir, file), join(vaultStopwordDir, file));
  }
}

const prod = process.argv[2] === 'production';

async function build() {
  console.log('Building plugin...');

  await mkdir('build', { recursive: true });
  await copyManifest();
  await copyAndTransformStopwordFiles();

  const context = await esbuild.context({
    banner: {
      js: banner,
    },
    entryPoints: ['src/main.js'],
    bundle: true,
    external: [
      'obsidian',
      'electron',
      '@codemirror/autocomplete',
      '@codemirror/collab',
      '@codemirror/commands',
      '@codemirror/language',
      '@codemirror/lint',
      '@codemirror/search',
      '@codemirror/state',
      '@codemirror/view',
      '@lezer/common',
      '@lezer/highlight',
      '@lezer/lr',
      ...builtins,
    ],
    format: 'cjs',
    target: 'es2018',
    logLevel: 'info',
    sourcemap: prod ? false : 'inline',
    treeShaking: true,
    outfile: 'build/main.js',
  });

  try {
    await context.rebuild();
    await copyToVault();
    console.log('Build completed successfully.');
  } catch (error) {
    console.error('Build failed:', error);
  } finally {
    await context.dispose();
  }
}

if (prod) {
  build().then(() => process.exit(0));
} else {
  build().then(() => console.log('Watching for changes...'));
}
