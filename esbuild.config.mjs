import esbuild from 'esbuild';
import process from 'process';
import builtins from 'builtin-modules';
import { copyFile, access, mkdir } from 'fs/promises';
import { join } from 'path';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const PLUGIN_NAME = 'obsidian-sqllite-sync';
const VAULT_PATH =
  '/Users/michaelsageryd/Library/Mobile Documents/iCloud~md~obsidian/Documents/the-vault/.obsidian/plugins';

async function copyToVault() {
  const pluginDir = join(VAULT_PATH, PLUGIN_NAME);
  const filesToCopy = ['main.js', 'manifest.json'];

  for (const file of filesToCopy) {
    try {
      await access(join('build', file));
      await copyFile(join('build', file), join(pluginDir, file));
      console.log(`${file} copied successfully to the Obsidian vault.`);
    } catch (error) {
      if (error.code === 'ENOENT') {
        console.warn(`Warning: ${file} does not exist in the build folder and was not copied.`);
      } else {
        console.error(`Error copying ${file}:`, error);
      }
    }
  }
}

const prod = process.argv[2] === 'production';

// Ensure build directory exists
await mkdir('build', { recursive: true });

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ['src/main.js'],
  bundle: true,
  external: [
    'obsidian',
    'electron',
    '@codemirror/autocomplete',
    '@codemirror/collab',
    '@codemirror/commands',
    '@codemirror/language',
    '@codemirror/lint',
    '@codemirror/search',
    '@codemirror/state',
    '@codemirror/view',
    '@lezer/common',
    '@lezer/highlight',
    '@lezer/lr',
    ...builtins,
  ],
  format: 'cjs',
  target: 'es2018',
  logLevel: 'info',
  sourcemap: prod ? false : 'inline',
  treeShaking: true,
  outfile: 'build/main.js',
  plugins: [
    {
      name: 'copy-to-vault',
      setup(build) {
        build.onEnd(async () => {
          await copyToVault();
        });
      },
    },
  ],
});

if (prod) {
  await context.rebuild();
  process.exit(0);
} else {
  await context.watch();
}
